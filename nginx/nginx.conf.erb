<%
if docker
  # ENV['APP_NAME'] = '$app_name'
  # ENV['SERVER_NAME'] = '$host_server_name'
end
%>

<%= 'user nginx;' if docker %>
# コア数と同じだけworker processを起動する
worker_processes auto;

pid    /var/run/nginx.pid;

events {
  worker_connections 4000;

  # TODO:複数の接続を一度に受け入れる
  multi_accept on;

  # TODO: デフォルトでオンになっている？
  <% if ENV['OS'] != 'Mac' || docker %>
  use epoll;
  <% else %>
  use kqueue;
  <% end %>
}

# プロセス毎のファイルディスクリプタの上限数
# worker_connectionの3-4倍を指定するとよい
worker_rlimit_nofile 15000;

<% if docker %>
# env SERVER_NAME;
# env APP_NAME;
<% end %>

http {
  <% if docker %>
  # ? doen't work with http_perl_module
  # perl_set $host_server_name 'sub { return $ENV{"SERVER_NAME"}; }';
  # perl_set $app_name 'sub { return $ENV{"APP_NAME"}; }';
  <% end %>

  include     mime.types;
  default_type  application/octet-stream;

  # サーバー名表示を無効化する。
  server_tokens off;

  # ファイルの読み込みと送信をカーネルに移譲する
  sendfile    on;

  # LinuxでTCP_CORKソケットオプションを利用する
  # レスポンスヘッダとファイルの内容をまとめて送るようになる
  # パケットを減らす。tcp_nodelayと逆の設定
  tcp_nopush   on;

  # AWS推奨では120
  keepalive_timeout  120;

  # 同じクライアントからの要求の最大数
  keepalive_requests 100;

  # クライアントからのファイル送信を受けるためのバッファ
  client_body_buffer_size      32k;

  # 普通は気にしない。このサイズを超えるヘッダでは413(Request Entity Too Large)が吐かれる
  client_header_buffer_size  1k;

  # クライアントのファイル送信の最大サイズ
  client_max_body_size 10M;

  # Dosを防ぐための設定
  # limit_conn_zone $binary_remote_addr zone=addr:10m;
  # limit_conn  addr  100;

  # Proxy cacheの設定
  <% if docker %>
  proxy_cache_path      /var/cache/nginx/app levels=1:2 keys_zone=app:100m inactive=7d max_size=1000m;
  proxy_temp_path  /var/cache/nginx/proxy_temp;
  <% end %>

  # gzip設定
  gzip             on;
  gzip_min_length  1000;
  gzip_comp_level  2;

  # プロキシ経由アクセスでのgzip設定
  gzip_proxied     expired no-cache no-store private auth;
  gzip_types       text/plain
                   text/css
                   application/javascript
                   text/xml
                   application/atom+xml
                   application/xml+rss
                   application/json
                   text/json
                   text/javascript+json;

  # ログフォーマット
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

  <% if docker || docker_dev %>
  include vh.conf;
  <% else %>
  include servers/*;
  <% end %>
}
